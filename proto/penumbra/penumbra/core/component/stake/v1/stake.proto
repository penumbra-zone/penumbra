syntax = "proto3";
package penumbra.core.component.stake.v1;

import "penumbra/core/asset/v1/asset.proto";
import "penumbra/core/component/sct/v1/sct.proto";
import "penumbra/core/keys/v1/keys.proto";
import "penumbra/core/num/v1/num.proto";

// A Penumbra ZK undelegate claim proof.
message ZKUndelegateClaimProof {
  bytes inner = 1;
}

// Describes a validator's configuration data.
message Validator {
  // The validator's identity verification key.
  keys.v1.IdentityKey identity_key = 1;
  // The validator's consensus pubkey for use in Tendermint (Ed25519).
  bytes consensus_key = 2;
  // The validator's (human-readable) name.
  string name = 3;
  // The validator's website.
  string website = 4;
  // The validator's description.
  string description = 5;
  // Whether the validator is enabled or not.
  //
  // Disabled validators cannot be delegated to, and immediately begin unbonding.
  bool enabled = 8;
  // A list of funding streams describing the validator's commission.
  repeated FundingStream funding_streams = 6;
  // The sequence number determines which validator data takes priority, and
  // prevents replay attacks.  The chain only accepts new validator definitions
  // with increasing sequence numbers.
  uint32 sequence_number = 7;
  // The validator's governance key.
  keys.v1.GovernanceKey governance_key = 9;
}

// For storing the list of keys of known validators.
message ValidatorList {
  repeated keys.v1.IdentityKey validator_keys = 1;
}

// A portion of a validator's commission.
message FundingStream {
  message ToAddress {
    // The destination address for the funding stream.
    string address = 1;
    // The portion of the staking reward for the entire delegation pool
    // allocated to this funding stream, specified in basis points.
    uint32 rate_bps = 2;
  }

  message ToCommunityPool {
    // The portion of the staking reward for the entire delegation pool
    // allocated to this funding stream, specified in basis points.
    uint32 rate_bps = 2;
  }

  // The recipient of the funding stream.
  oneof recipient {
    ToAddress to_address = 1;
    ToCommunityPool to_community_pool = 2;
  }
}

// Describes the reward and exchange rates and voting power for a validator in some epoch.
message RateData {
  keys.v1.IdentityKey identity_key = 1;
  uint64 epoch_index = 2 [deprecated = true];
  num.v1.Amount validator_reward_rate = 4;
  // The validator exchange rate between delegation tokens and staking tokens.
  // The rate is expressed in fixed-point representation with a scaling factor
  // of 10^8. For example, a decimal rate of `1.234` will be represented as
  // `123400000`
  num.v1.Amount validator_exchange_rate = 5;
}

// Describes the base reward and exchange rates in some epoch.
message BaseRateData {
  uint64 epoch_index = 1;
  num.v1.Amount base_reward_rate = 2;
  num.v1.Amount base_exchange_rate = 3;
}

// Describes the current state of a validator on-chain
message ValidatorStatus {
  keys.v1.IdentityKey identity_key = 1;
  ValidatorState state = 2;
  num.v1.Amount voting_power = 3;
  BondingState bonding_state = 4;
}

// Describes the unbonding state of a validator's stake pool.
message BondingState {
  enum BondingStateEnum {
    BONDING_STATE_ENUM_UNSPECIFIED = 0;
    BONDING_STATE_ENUM_BONDED = 1;
    BONDING_STATE_ENUM_UNBONDING = 2;
    BONDING_STATE_ENUM_UNBONDED = 3;
  }
  BondingStateEnum state = 1;
  uint64 unbonds_at_epoch = 2 [deprecated = true];
  uint64 unbonds_at_height = 3;
}

// Describes the state of a validator
message ValidatorState {
  enum ValidatorStateEnum {
    VALIDATOR_STATE_ENUM_UNSPECIFIED = 0;
    VALIDATOR_STATE_ENUM_DEFINED = 1;
    VALIDATOR_STATE_ENUM_INACTIVE = 2;
    VALIDATOR_STATE_ENUM_ACTIVE = 3;
    VALIDATOR_STATE_ENUM_JAILED = 4;
    VALIDATOR_STATE_ENUM_TOMBSTONED = 5;
    VALIDATOR_STATE_ENUM_DISABLED = 6;
  }
  ValidatorStateEnum state = 1;
}

// Combines all validator info into a single packet.
message ValidatorInfo {
  Validator validator = 1;
  ValidatorStatus status = 2;
  RateData rate_data = 3;
}

// A transaction action (re)defining a validator.
message ValidatorDefinition {
  // The configuration data for the validator.
  Validator validator = 1;
  // A signature by the validator's identity key over the validator data.
  bytes auth_sig = 2;
}

// A transaction action adding stake to a validator's delegation pool.
message Delegate {
  // The identity key of the validator to delegate to.
  keys.v1.IdentityKey validator_identity = 1;
  // The index of the epoch in which this delegation was performed.
  // The delegation takes effect in the next epoch.
  uint64 epoch_index = 2;
  // The delegation amount, in units of unbonded stake.
  // TODO: use flow aggregation to hide this, replacing it with bytes amount_ciphertext;
  num.v1.Amount unbonded_amount = 3;
  // The amount of delegation tokens produced by this action.
  //
  // This is implied by the validator's exchange rate in the specified epoch
  // (and should be checked in transaction validation!), but including it allows
  // stateless verification that the transaction is internally consistent.
  num.v1.Amount delegation_amount = 4;
}

// A transaction action withdrawing stake from a validator's delegation pool.
message Undelegate {
  // The identity key of the validator to undelegate from.
  keys.v1.IdentityKey validator_identity = 1;
  // The index of the epoch in which this undelegation was performed.
  uint64 start_epoch_index = 2 [deprecated = true];
  // The amount to undelegate, in units of unbonding tokens.
  num.v1.Amount unbonded_amount = 3;
  // The amount of delegation tokens consumed by this action.
  //
  // This is implied by the validator's exchange rate in the specified epoch
  // (and should be checked in transaction validation!), but including it allows
  // stateless verification that the transaction is internally consistent.
  num.v1.Amount delegation_amount = 4;
  // The epoch in which this delegation was performed.
  penumbra.core.component.sct.v1.Epoch from_epoch = 5;
}

// A transaction action finishing an undelegation, converting (slashable)
// "unbonding tokens" to (unslashable) staking tokens.
message UndelegateClaim {
  UndelegateClaimBody body = 1;
  bytes proof = 2;
}

message UndelegateClaimBody {
  // The identity key of the validator to finish undelegating from.
  keys.v1.IdentityKey validator_identity = 1;
  // The epoch in which unbonding began, used to verify the penalty.
  uint64 start_epoch_index = 2 [deprecated = true];
  // The penalty applied to undelegation, in bps^2 (10e-8).
  // In the happy path (no slashing), this is 0.
  Penalty penalty = 3;
  // The action's contribution to the transaction's value balance.
  asset.v1.BalanceCommitment balance_commitment = 4;
  /// The starting height of the epoch during which unbonding began.
  uint64 unbonding_start_height = 5;
}

message UndelegateClaimPlan {
  // The identity key of the validator to finish undelegating from.
  keys.v1.IdentityKey validator_identity = 1;
  // The epoch in which unbonding began, used to verify the penalty.
  uint64 start_epoch_index = 2 [deprecated = true];
  // The penalty applied to undelegation, in bps^2 (10e-8).
  // In the happy path (no slashing), this is 0.
  Penalty penalty = 4;
  // The amount of unbonding tokens to claim.
  // This is a bare number because its denom is determined by the preceding data.
  num.v1.Amount unbonding_amount = 5;
  // The blinding factor to use for the balance commitment.
  bytes balance_blinding = 6;
  // The first blinding factor to use for the ZK undelegate claim proof.
  bytes proof_blinding_r = 7 [deprecated = true];
  // The second blinding factor to use for the ZK undelegate claim proof.
  bytes proof_blinding_s = 8 [deprecated = true];
  // The height during which unbonding began.
  uint64 unbonding_start_height = 9;
}

// A list of pending delegations and undelegations.
message DelegationChanges {
  repeated Delegate delegations = 1;
  repeated Undelegate undelegations = 2;
}

// Track's a validator's uptime.
message Uptime {
  uint64 as_of_block_height = 1;
  uint32 window_len = 2;
  bytes bitvec = 3;
}

// Tracks our view of Tendermint's view of the validator set, so we can keep it
// from getting confused.
message CurrentConsensusKeys {
  repeated keys.v1.ConsensusKey consensus_keys = 1;
}

// Tracks slashing penalties applied to a validator in some epoch.
message Penalty {
  bytes inner = 1;
}

// Query operations for the staking component.
service QueryService {
  // Queries for information about a specific validator.
  rpc GetValidatorInfo(GetValidatorInfoRequest) returns (GetValidatorInfoResponse);
  // Queries the current validator set, with filtering.
  rpc ValidatorInfo(ValidatorInfoRequest) returns (stream ValidatorInfoResponse);
  rpc ValidatorStatus(ValidatorStatusRequest) returns (ValidatorStatusResponse);
  rpc ValidatorPenalty(ValidatorPenaltyRequest) returns (ValidatorPenaltyResponse);
  rpc CurrentValidatorRate(CurrentValidatorRateRequest) returns (CurrentValidatorRateResponse);
  rpc ValidatorUptime(ValidatorUptimeRequest) returns (ValidatorUptimeResponse);
}

// Requests information about a specific validator.
message GetValidatorInfoRequest {
  // The identity key of the validator.
  core.keys.v1.IdentityKey identity_key = 2;
}

message GetValidatorInfoResponse {
  core.component.stake.v1.ValidatorInfo validator_info = 1;
}

// Requests information on the chain's validators.
message ValidatorInfoRequest {
  // Whether or not to return inactive validators
  bool show_inactive = 2;
}

message ValidatorInfoResponse {
  core.component.stake.v1.ValidatorInfo validator_info = 1;
}

message ValidatorStatusRequest {
  core.keys.v1.IdentityKey identity_key = 2;
}

message ValidatorStatusResponse {
  core.component.stake.v1.ValidatorStatus status = 1;
}

// Requests the compounded penalty for a validator over a range of epochs.
message ValidatorPenaltyRequest {
  core.keys.v1.IdentityKey identity_key = 2;
  uint64 start_epoch_index = 3;
  uint64 end_epoch_index = 4;
}

message ValidatorPenaltyResponse {
  core.component.stake.v1.Penalty penalty = 1;
}

message CurrentValidatorRateRequest {
  core.keys.v1.IdentityKey identity_key = 2;
}

message CurrentValidatorRateResponse {
  core.component.stake.v1.RateData data = 1;
}

message ValidatorUptimeRequest {
  core.keys.v1.IdentityKey identity_key = 2;
}

message ValidatorUptimeResponse {
  Uptime uptime = 1;
}

// Staking configuration data.
message StakeParameters {
  // The number of epochs an unbonding note for before being released.
  uint64 unbonding_epochs = 1 [deprecated = true];
  // The maximum number of validators in the consensus set.
  uint64 active_validator_limit = 2;
  // The base reward rate, expressed in basis points of basis points
  uint64 base_reward_rate = 3 [deprecated = true];
  // The penalty for slashing due to misbehavior.
  uint64 slashing_penalty_misbehavior = 4;
  // The penalty for slashing due to downtime.
  uint64 slashing_penalty_downtime = 5;
  // The number of blocks in the window to check for downtime.
  uint64 signed_blocks_window_len = 6;
  // The maximum number of blocks in the window each validator can miss signing without slashing.
  uint64 missed_blocks_maximum = 7;
  // The minimum amount of stake required for a validator to be indexed by the protocol.
  num.v1.Amount min_validator_stake = 8;
  // The number of blocks that must elapse before an unbonding note can be claimed.
  uint64 unbonding_delay = 9;
}

// Genesis data for the staking component.
message GenesisContent {
  // The configuration parameters for the staking component present at genesis
  StakeParameters stake_params = 1;
  // The list of validators present at genesis.
  repeated stake.v1.Validator validators = 2;
}

// Events for the staking component:

message EventTombstoneValidator {
  // The height at which the offense occurred.
  uint64 evidence_height = 1;
  // The height at which the evidence was processed.
  uint64 current_height = 2;
  // The validator identity key.
  keys.v1.IdentityKey identity_key = 4;
  // The validator's Comet address.
  bytes address = 5;
  // The voting power for the validator.
  uint64 voting_power = 6;
}

message EventValidatorStateChange {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The new state of the validator.
  ValidatorState state = 2;
}

message EventValidatorVotingPowerChange {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The new voting power of the validator.
  num.v1.Amount voting_power = 2;
}

message EventValidatorBondingStateChange {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The new bonding state of the validator.
  BondingState bonding_state = 2;
}

message EventRateDataChange {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The new rate data.
  RateData rate_data = 2;
}

message EventValidatorDefinitionUpload {
  // The validator definition.
  Validator validator = 1;
}

message EventValidatorMissedBlock {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
}

message EventDelegate {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The amount of stake delegated, in the staking token.
  num.v1.Amount amount = 3;
}

message EventUndelegate {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The amount of stake undelegated, in the staking token.
  num.v1.Amount amount = 3;
}

// Indicates a slashing penalty was applied to a validator's reward rates.
message EventSlashingPenaltyApplied {
  // The validator's identity key.
  keys.v1.IdentityKey identity_key = 1;
  // The epoch in which the penalty was applied.
  uint64 epoch_index = 2;
  // The penalty amount after slashing.
  Penalty new_penalty = 3;
}
