syntax = "proto3";
package penumbra.core.component.shielded_pool.v1;

import "penumbra/core/asset/v1/asset.proto";
import "penumbra/core/component/sct/v1/sct.proto";
import "penumbra/core/keys/v1/keys.proto";
import "penumbra/core/num/v1/num.proto";
import "penumbra/core/txhash/v1/txhash.proto";
import "penumbra/crypto/decaf377_fmd/v1/decaf377_fmd.proto";
import "penumbra/crypto/decaf377_rdsa/v1/decaf377_rdsa.proto";
import "penumbra/crypto/tct/v1/tct.proto";

// Configuration data for the shielded pool component.
message ShieldedPoolParameters {
  FmdParameters fixed_fmd_params = 1 [deprecated = true];
  FmdMetaParameters fmd_meta_params = 2;
}

// Genesis data for the shielded pool component.
message GenesisContent {
  ShieldedPoolParameters shielded_pool_params = 1;
  message Allocation {
    penumbra.core.num.v1.Amount amount = 1;
    string denom = 2;
    penumbra.core.keys.v1.Address address = 3;
  }

  // The allocations present at genesis
  repeated Allocation allocations = 3;
}

// The parameters which control how the FMD parameters evolve over time.
message FmdMetaParameters {
  // A sliding window algorithm for updating the parameters.
  message AlgorithmSlidingWindow {
    // The window size, in terms of the number of update periods.
    //
    // The update period is 16 blocks, by default, but can change with governance.
    uint32 window_update_periods = 1;
    // The number of detections we aim to see per window.
    uint32 targeted_detections_per_window = 2;
  }

  // How much time users have to transition to new parameters.
  uint64 fmd_grace_period_blocks = 1;
  // The algorithm governing how the parameters change.
  oneof algorithm {
    uint32 fixed_precision_bits = 2;
    AlgorithmSlidingWindow sliding_window = 3;
  }
}

// Used to potentially store state for the FMD Meta Parameters algorithm.
message FmdMetaParametersAlgorithmState {
  // The state used for the fixed algorithm.
  message FixedState {}

  // The state used for the sliding window algorithm.
  message SlidingWindowState {
    // The number of clues previously observed, approximately.
    uint32 approximate_clue_count = 1;
  }

  oneof state {
    FixedState fixed = 1;
    SlidingWindowState sliding_window = 2;
  }
}

// Parameters for Fuzzy Message Detection
message FmdParameters {
  uint32 precision_bits = 1;
  uint64 as_of_block_height = 2;
}

message Note {
  asset.v1.Value value = 1;
  bytes rseed = 2;
  keys.v1.Address address = 3;
}

message NoteView {
  asset.v1.ValueView value = 1;
  bytes rseed = 2;
  keys.v1.AddressView address = 3;
}

// An encrypted note.
// 176 = 80(address) + 16(amount) + 32(asset ID) + 32(rseed) + 16(MAC) bytes.
message NoteCiphertext {
  bytes inner = 1;
}

// The body of an output description, including only the minimal
// data required to scan and process the output.
message NotePayload {
  // The note commitment for the output note. 32 bytes.
  crypto.tct.v1.StateCommitment note_commitment = 1;
  // The encoding of an ephemeral public key. 32 bytes.
  bytes ephemeral_key = 2;
  // An encryption of the newly created note.
  // 176 = 80(address) + 16(amount) + 32(asset ID) + 32(rseed) + 16(MAC) bytes.
  NoteCiphertext encrypted_note = 3;
}

// A Penumbra ZK output proof.
message ZKOutputProof {
  bytes inner = 1;
}

// A Penumbra ZK spend proof.
message ZKSpendProof {
  bytes inner = 1;
}

// A Penumbra ZK nullifier derivation proof.
message ZKNullifierDerivationProof {
  bytes inner = 1;
}

// Spends a shielded note.
message Spend {
  // The effecting data of the spend.
  SpendBody body = 1;
  // The authorizing signature for the spend.
  crypto.decaf377_rdsa.v1.SpendAuthSignature auth_sig = 2;
  // The proof that the spend is well-formed is authorizing data.
  ZKSpendProof proof = 3;
}

// ABCI Event recording a spend.
message EventSpend {
  core.component.sct.v1.Nullifier nullifier = 1;
}

// ABCI Event recording an output.
message EventOutput {
  crypto.tct.v1.StateCommitment note_commitment = 1;
}

// ABCI Event recording a clue.
message EventBroadcastClue {
  crypto.decaf377_fmd.v1.Clue clue = 1;
  txhash.v1.TransactionId tx = 2;
}

// The body of a spend description, containing only the effecting data
// describing changes to the ledger, and not the authorizing data that allows
// those changes to be performed.
message SpendBody {
  // A commitment to the value of the input note.
  asset.v1.BalanceCommitment balance_commitment = 1;
  // The nullifier of the input note.
  sct.v1.Nullifier nullifier = 6;
  // The randomized validating key for the spend authorization signature.
  crypto.decaf377_rdsa.v1.SpendVerificationKey rk = 4;
  // An encryption of the commitment of the input note to the sender's OVK.
  bytes encrypted_backref = 7;
}
message SpendView {
  message Visible {
    Spend spend = 1;
    NoteView note = 2;
  }
  message Opaque {
    Spend spend = 1;
  }
  oneof spend_view {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}

message SpendPlan {
  // The plaintext note we plan to spend.
  Note note = 1;
  // The position of the note we plan to spend.
  uint64 position = 2;
  // The randomizer to use for the spend.
  bytes randomizer = 3;
  // The blinding factor to use for the value commitment.
  bytes value_blinding = 4;
  // The first blinding factor to use for the ZK spend proof.
  bytes proof_blinding_r = 5 [deprecated = true];
  // The second blinding factor to use for the ZK spend proof.
  bytes proof_blinding_s = 6 [deprecated = true];
}

// Creates a new shielded note.
message Output {
  // The effecting data for the output.
  OutputBody body = 1;
  // The output proof is authorizing data.
  ZKOutputProof proof = 2;
}

// The body of an output description, containing only the effecting data
// describing changes to the ledger, and not the authorizing data that allows
// those changes to be performed.
message OutputBody {
  // The minimal data required to scan and process the new output note.
  NotePayload note_payload = 1;
  // A commitment to the value of the output note. 32 bytes.
  asset.v1.BalanceCommitment balance_commitment = 2;
  // An encrypted key for decrypting the memo.
  bytes wrapped_memo_key = 3;
  // The key material used for note encryption, wrapped in encryption to the
  // sender's outgoing viewing key. 48 bytes.
  bytes ovk_wrapped_key = 4;
}

message OutputView {
  message Visible {
    Output output = 1;
    NoteView note = 2;
    keys.v1.PayloadKey payload_key = 3;
  }

  message Opaque {
    Output output = 1;
  }
  oneof output_view {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}

message OutputPlan {
  // The value to send to this output.
  asset.v1.Value value = 1;
  // The destination address to send it to.
  keys.v1.Address dest_address = 2;
  // The rseed to use for the new note.
  bytes rseed = 3;
  // The blinding factor to use for the value commitment.
  bytes value_blinding = 4;
  // The first blinding factor to use for the ZK output proof.
  bytes proof_blinding_r = 5 [deprecated = true];
  // The second blinding factor to use for the ZK output proof.
  bytes proof_blinding_s = 6 [deprecated = true];
}

// Query operations for the shielded pool component.
service QueryService {
  rpc AssetMetadataById(AssetMetadataByIdRequest) returns (AssetMetadataByIdResponse);

  // Requests a stream of asset metadata, given an array of asset IDs. Responses
  // may be streamed in a different order from that of the asset IDs in the
  // request, and asset IDs unknown to the node will not receive any response
  // objects -- that is, the number of responses may be smaller than the length
  // of the asset IDs array.
  rpc AssetMetadataByIds(AssetMetadataByIdsRequest) returns (stream AssetMetadataByIdsResponse);
}


// Requests information on an asset by asset id
message AssetMetadataByIdRequest {
  // The asset id to request information on.
  core.asset.v1.AssetId asset_id = 2;
}

message AssetMetadataByIdResponse {
  // If present, information on the requested asset.
  //
  // If the requested asset was unknown, this field will not be present.
  core.asset.v1.Metadata denom_metadata = 1;
}

// Requests information on an asset by multiple asset ids
message AssetMetadataByIdsRequest {
  // The asset IDs to request information on. Note that node is neither required
  // nor expected to stream responses in the same order as this array.
  repeated core.asset.v1.AssetId asset_id = 1;
}

message AssetMetadataByIdsResponse {
  // A single asset metadata streamed from the node.
  core.asset.v1.Metadata denom_metadata = 1;
}

// Metadata about the packet associated with the transfer.
//
// This allows identifying which specific packet is associated with the transfer.
// Implicitly, both ports are going to be "transfer".
message FungibleTokenTransferPacketMetadata {
  // The identifier for the channel on *this* chain.
  string channel = 1;
  // Sequence number for the packet.
  uint64 sequence = 2;
}

message EventOutboundFungibleTokenTransfer {
  // The value being transferred out of the chain.
  core.asset.v1.Value value = 1;
  // The sending address on chain.
  core.keys.v1.Address sender = 2;
  // The receiving address, which we don't assume anything about.
  string receiver = 3;
  FungibleTokenTransferPacketMetadata meta = 4;
}

message EventOutboundFungibleTokenRefund {
  enum Reason {
    // No particular reason.
    REASON_UNSPECIFIED = 0;
    // The transfer timed out.
    REASON_TIMEOUT = 1;
    // The transfer was acknowledged with an error.
    REASON_ERROR = 2;
  }

  // The value being refunded.
  core.asset.v1.Value value = 1;
  // The sender being refunded.
  core.keys.v1.Address sender = 2;
  // The address that attempted to receive the funds.
  string receiver = 3;
  // Why the refund is happening.
  Reason reason = 4;
  // This will be the metadata for the packet for the transfer being refunded.
  //
  // This allows linking a refund to the transfer.
  FungibleTokenTransferPacketMetadata meta = 5;
}

message EventInboundFungibleTokenTransfer {
  // The value being transferred in.
  core.asset.v1.Value value = 1;
  // The sender on the counterparty chain.
  string sender = 2;
  // The receiver on this chain.
  core.keys.v1.Address receiver = 3;
  FungibleTokenTransferPacketMetadata meta = 4;
}
