syntax = "proto3";
package penumbra.core.component.funding.v1;

import "penumbra/core/asset/v1/asset.proto";
import "penumbra/core/component/sct/v1/sct.proto";
import "penumbra/core/component/shielded_pool/v1/shielded_pool.proto";
import "penumbra/core/keys/v1/keys.proto";
import "penumbra/core/num/v1/num.proto";
import "penumbra/crypto/decaf377_rdsa/v1/decaf377_rdsa.proto";
import "penumbra/core/txhash/v1/txhash.proto";

// Query operations for the funding component.
service FundingService {
  // Checks if a particular nullifier has already been used in the current epoch.
  rpc LqtCheckNullifier(LqtCheckNullifierRequest) returns (LqtCheckNullifierResponse);
}

// Request if a nullifier is already used in a specific epoch.
message LqtCheckNullifierRequest {
  // The epoch index in which to check for nullifier usage.
  uint64 epoch_index = 1;
  // The nullifier whose voting status is being queried.
  sct.v1.Nullifier nullifier = 2;
}

// Response indicating whether the nullifier was already used.
message LqtCheckNullifierResponse {
  // The transaction ID of the vote, if the nullifier has been used.
  // This field is always present if `already_voted` is true.
  txhash.v1.TransactionId transaction = 1;
  // Indicates whether the nullifier has already been used for voting in the given epoch.
  bool already_voted = 2;
  // The epoch index in which the nullifier was checked.
  uint64 epoch_index = 3;
}

// Funding component configuration data.
message FundingParameters {
  message LiquidityTournament {
    // The fraction of gauge votes that an asset must pass to get any rewards.
    //
    // Takes a value in [0, 100].
    uint64 gauge_threshold_percent = 1;
    // The maximum number of liquidity positions that can receive rewards.
    //
    // This avoids potential DoS vectors with processing a large number of small positions.
    uint64 max_positions = 2;
    // The maximum number of delegators that can be rewarded.
    //
    // Also avoids potential DoS vectors 
    uint64 max_delegators = 3;
    // The share of rewards which will go to delegators, opposed with positions.
    //
    // Takes a value in [0, 100].
    uint64 delegator_share_percent = 4;
  }

  // The parameters governing the funding of the liquidity tournament.
  LiquidityTournament liquidity_tournament = 1;
}

// Genesis data for the funding component.
message GenesisContent {
  FundingParameters funding_params = 1;
}

// Indicates that a funding stream reward was paid.
message EventFundingStreamReward {
  // The recipient of the funding stream reward.
  // This is a string value for future extensibility.
  // Currently it will be either "community-pool"
  // or an address.
  string recipient = 1;
  // The epoch for which the reward was paid.
  uint64 epoch_index = 2;
  // The amount of the reward, in staking tokens.
  num.v1.Amount reward_amount = 3;
}

// An action for voting in a liquidity tournament.
message ActionLiquidityTournamentVote {
  // The effectful data signalling user intent, and the validity of this intent.
  LiquidityTournamentVoteBody body = 1;
  // An authorization from the user over this body.
  crypto.decaf377_rdsa.v1.SpendAuthSignature auth_sig = 2;
  // A ZK proof that it was correctly constructed from private user state.
  ZKLiquidityTournamentVoteProof proof = 3;
}

message LiquidityTournamentVoteBody {
  // Which asset should be incentivized.
  asset.v1.Denom incentivized = 1;
  // Where to send any rewards for participating in the tournament.
  keys.v1.Address rewards_recipient = 2;
  // The start position of the tournament
  uint64 start_position = 3;
  // The value being voted with.
  //
  // This should be some amount of a validator's delegation token.
  asset.v1.Value value = 4;
  // The nullifier associated with the note being spent.
  sct.v1.Nullifier nullifier = 5;
  // A randomized verification key with which to check the auth signature.
  crypto.decaf377_rdsa.v1.SpendVerificationKey rk = 6;
}

// A proof of the validity of a liquidity vote, wrt private state.
message ZKLiquidityTournamentVoteProof {
  bytes inner = 1;
}

message ActionLiquidityTournamentVoteView {
  // If we initiated the vote, we should know the note that we spent.
  message Visible {
    ActionLiquidityTournamentVote vote = 1;
    shielded_pool.v1.NoteView note = 2;
  }
  message Opaque {
    ActionLiquidityTournamentVote vote = 1;    
  }
  oneof liquidity_tournament_vote {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}
