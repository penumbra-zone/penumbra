syntax = "proto3";
package penumbra.core.component.distributions.v1;
import "penumbra/core/num/v1/num.proto";

// Query operations for the distributions component.
service DistributionsService {
  rpc CurrentLqtPoolSize(CurrentLqtPoolSizeRequest) returns (CurrentLqtPoolSizeResponse);
  rpc LqtPoolSizeByEpoch(LqtPoolSizeByEpochRequest) returns (LqtPoolSizeByEpochResponse);
}

// Distribution configuration data.
message DistributionsParameters {
  // The amount of staking token issued per block.
  uint64 staking_issuance_per_block = 1;
  // The amount of staking token flowing from the community pool to the liquidity tournament each block.
  uint64 liquidity_tournament_incentive_per_block = 2;
}

// Genesis data for the distributions module.
message GenesisContent {
  DistributionsParameters distributions_params = 1;
}

// Request for retrieving the pool size of the current epoch from the chain state. 
message CurrentLqtPoolSizeRequest {}

// Response containing the pool size for the current epoch.
message CurrentLqtPoolSizeResponse {
  // The current epoch index.
  uint64 epoch_index = 1;

  // The total LQT pool size for the current epoch.
  core.num.v1.Amount pool_size = 2;
}

// Request for retrieving the pool size at a specific epoch.
message LqtPoolSizeByEpochRequest {
  // The epoch for which we want to retrieve the pool size.
  uint64 epoch = 1;
}

// Response containing the pool size at a specific epoch.
message LqtPoolSizeByEpochResponse {
  // The epoch for which the pool size is returned.
  uint64 epoch_index = 1;
  
  // The total LQT pool size for the given epoch.
  core.num.v1.Amount pool_size = 2;
}
