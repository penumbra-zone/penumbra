syntax = "proto3";
package penumbra.core.component.sct.v1;

import "penumbra/crypto/tct/v1/tct.proto";
import "penumbra/core/txhash/v1/txhash.proto";
import "google/protobuf/timestamp.proto";

// Configuration data for the SCT component.
message SctParameters {
  // The default duration of each epoch, in number of blocks.
  uint64 epoch_duration = 1;
}

// Sct-specific genesis content.
message GenesisContent {
  // The SctParameters present at genesis.
  SctParameters sct_params = 1;
}

// An epoch is a sequentially numbered collection of contiguous blocks.
message Epoch {
  // The unique index of the epoch.
  uint64 index = 1;
  // The starting height for the epoch.
  uint64 start_height = 2;
}

// Metadata describing the source of a commitment in the state commitment tree.
//
// This message allows clients to track provenance of state commitments, and to
// decide whether or not to download block data.
message CommitmentSource {
  // The state commitment was included in the genesis state.
  message Genesis {}
  // The commitment was created by a transaction.
  //
  // When included in a `CompactBlock` via a `StatePayload`, the transaction source is "dehydrated"
  // by stripping the `id` field and putting empty bytes in its place.  When clients perform extended
  // transaction fetch, they should match up transaction hashes to "rehydrate" the source info.
  message Transaction {
    // The transaction ID, if specified.
    //
    // This field may be omitted to save space, and should not be required to be present.
    // If the bytes are missing, the message should be interpreted as "Transaction (Unknown)".
    bytes id = 1;
  }
  // The commitment was created through a validator's funding stream.
  message FundingStreamReward {
    // The epoch index the rewards were issued in.
    uint64 epoch_index = 1;
  }
  // The commitment was created through a `CommunityPoolOutput` in a governance-initated transaction.
  message CommunityPoolOutput {}
  // The commitment was created by an inbound ICS20 transfer.
  message Ics20Transfer {
    // The sequence number of the packet that triggered the transfer
    uint64 packet_seq = 1;
    // The channel id the transfer happened on
    string channel_id = 2;
    // The sender address on the counterparty chain
    string sender = 3;
  }
  // The commitment was created by the LQT mechanism and tracks LQT reward notes. 
  message LiquidityTournamentReward {
    // The epoch in which the reward occured.
    uint64 epoch = 1;
    // Transaction hash of the transaction that did the voting.
    txhash.v1.TransactionId tx_hash = 2;
  }
  oneof source {
    Transaction transaction = 1;
    Ics20Transfer ics_20_transfer = 2;
    FundingStreamReward funding_stream_reward = 20;
    CommunityPoolOutput community_pool_output = 30;
    Genesis genesis = 40;
    LiquidityTournamentReward lqt = 50;
  }
}

message Nullifier {
  bytes inner = 1;
}

// Records information about what transaction spent a nullifier.
message NullificationInfo {
  bytes id = 1;
  uint64 spend_height = 2;
}

// Event recording a new commitment added to the SCT.
message EventCommitment {
  crypto.tct.v1.StateCommitment commitment = 1;
  uint64 position = 2;
  CommitmentSource source = 3;
}

// Event recording an SCT anchor (global root).
message EventAnchor {
  crypto.tct.v1.MerkleRoot anchor = 1;
  uint64 height = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Event recording an SCT epoch root.
message EventEpochRoot {
  crypto.tct.v1.MerkleRoot root = 1;
  uint64 index = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Event recording an SCT block root.
message EventBlockRoot {
  crypto.tct.v1.MerkleRoot root = 1;
  uint64 height = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message EpochByHeightRequest {
  uint64 height = 1;
}

message EpochByHeightResponse {
  Epoch epoch = 1;
}

message AnchorByHeightRequest {
  uint64 height = 1;
}

message AnchorByHeightResponse {
  crypto.tct.v1.MerkleRoot anchor = 1;
}

message TimestampByHeightRequest {
  uint64 height = 1;
}

message TimestampByHeightResponse {
  google.protobuf.Timestamp timestamp = 1;
}

// Query operations for the SCT component.
service QueryService {
  rpc AnchorByHeight(AnchorByHeightRequest) returns (AnchorByHeightResponse);
  rpc EpochByHeight(EpochByHeightRequest) returns (EpochByHeightResponse);
  rpc TimestampByHeight(TimestampByHeightRequest) returns (TimestampByHeightResponse);
}
