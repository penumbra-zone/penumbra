// This file is @generated by prost-build.
/// Params defines the parameters for the bank module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// Deprecated: Use of SendEnabled in params is deprecated.
    /// For genesis, use the newly added send_enabled field in the genesis object.
    /// Storage, lookup, and manipulation of this information is now in the keeper.
    ///
    /// As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
    #[deprecated]
    #[prost(message, repeated, tag = "1")]
    pub send_enabled: ::prost::alloc::vec::Vec<SendEnabled>,
    #[prost(bool, tag = "2")]
    pub default_send_enabled: bool,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.Params".into()
    }
}
/// SendEnabled maps coin denom to a send_enabled status (whether a denom is
/// sendable).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendEnabled {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub enabled: bool,
}
impl ::prost::Name for SendEnabled {
    const NAME: &'static str = "SendEnabled";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.SendEnabled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.SendEnabled".into()
    }
}
/// Input models transaction input.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub coins: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for Input {
    const NAME: &'static str = "Input";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.Input".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.Input".into()
    }
}
/// Output models transaction outputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub coins: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for Output {
    const NAME: &'static str = "Output";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.Output".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.Output".into()
    }
}
/// Supply represents a struct that passively keeps track of the total supply
/// amounts in the network.
/// This message is deprecated now that supply is indexed by denom.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Supply {
    #[prost(message, repeated, tag = "1")]
    pub total: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for Supply {
    const NAME: &'static str = "Supply";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.Supply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.Supply".into()
    }
}
/// DenomUnit represents a struct that describes a given
/// denomination unit of the basic token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DenomUnit {
    /// denom represents the string name of the given denom unit (e.g uatom).
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// exponent represents power of 10 exponent that one must
    /// raise the base_denom to in order to equal the given DenomUnit's denom
    /// 1 denom = 10^exponent base_denom
    /// (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
    /// exponent = 6, thus: 1 atom = 10^6 uatom).
    #[prost(uint32, tag = "2")]
    pub exponent: u32,
    /// aliases is a list of string aliases for the given denom
    #[prost(string, repeated, tag = "3")]
    pub aliases: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for DenomUnit {
    const NAME: &'static str = "DenomUnit";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.DenomUnit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.DenomUnit".into()
    }
}
/// Metadata represents a struct that describes
/// a basic token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
    /// denom_units represents the list of DenomUnit's for a given coin
    #[prost(message, repeated, tag = "2")]
    pub denom_units: ::prost::alloc::vec::Vec<DenomUnit>,
    /// base represents the base denom (should be the DenomUnit with exponent = 0).
    #[prost(string, tag = "3")]
    pub base: ::prost::alloc::string::String,
    /// display indicates the suggested denom that should be
    /// displayed in clients.
    #[prost(string, tag = "4")]
    pub display: ::prost::alloc::string::String,
    /// name defines the name of the token (eg: Cosmos Atom)
    ///
    /// Since: cosmos-sdk 0.43
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    /// symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
    /// be the same as the display.
    ///
    /// Since: cosmos-sdk 0.43
    #[prost(string, tag = "6")]
    pub symbol: ::prost::alloc::string::String,
    /// URI to a document (on or off-chain) that contains additional information. Optional.
    ///
    /// Since: cosmos-sdk 0.46
    #[prost(string, tag = "7")]
    pub uri: ::prost::alloc::string::String,
    /// URIHash is a sha256 hash of a document pointed by URI. It's used to verify that
    /// the document didn't change. Optional.
    ///
    /// Since: cosmos-sdk 0.46
    #[prost(string, tag = "8")]
    pub uri_hash: ::prost::alloc::string::String,
}
impl ::prost::Name for Metadata {
    const NAME: &'static str = "Metadata";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.Metadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.Metadata".into()
    }
}
/// QueryBalanceRequest is the request type for the Query/Balance RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBalanceRequest {
    /// address is the address to query balances for.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// denom is the coin denom to query balances for.
    #[prost(string, tag = "2")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryBalanceRequest {
    const NAME: &'static str = "QueryBalanceRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryBalanceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryBalanceRequest".into()
    }
}
/// QueryBalanceResponse is the response type for the Query/Balance RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBalanceResponse {
    /// balance is the balance of the coin.
    #[prost(message, optional, tag = "1")]
    pub balance: ::core::option::Option<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for QueryBalanceResponse {
    const NAME: &'static str = "QueryBalanceResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryBalanceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryBalanceResponse".into()
    }
}
/// QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllBalancesRequest {
    /// address is the address to query balances for.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
    /// resolve_denom is the flag to resolve the denom into a human-readable form from the metadata.
    ///
    /// Since: cosmos-sdk 0.48
    #[prost(bool, tag = "3")]
    pub resolve_denom: bool,
}
impl ::prost::Name for QueryAllBalancesRequest {
    const NAME: &'static str = "QueryAllBalancesRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryAllBalancesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryAllBalancesRequest".into()
    }
}
/// QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllBalancesResponse {
    /// balances is the balances of all the coins.
    #[prost(message, repeated, tag = "1")]
    pub balances: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllBalancesResponse {
    const NAME: &'static str = "QueryAllBalancesResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryAllBalancesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryAllBalancesResponse".into()
    }
}
/// QuerySpendableBalancesRequest defines the gRPC request structure for querying
/// an account's spendable balances.
///
/// Since: cosmos-sdk 0.46
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpendableBalancesRequest {
    /// address is the address to query spendable balances for.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QuerySpendableBalancesRequest {
    const NAME: &'static str = "QuerySpendableBalancesRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySpendableBalancesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySpendableBalancesRequest".into()
    }
}
/// QuerySpendableBalancesResponse defines the gRPC response structure for querying
/// an account's spendable balances.
///
/// Since: cosmos-sdk 0.46
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpendableBalancesResponse {
    /// balances is the spendable balances of all the coins.
    #[prost(message, repeated, tag = "1")]
    pub balances: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QuerySpendableBalancesResponse {
    const NAME: &'static str = "QuerySpendableBalancesResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySpendableBalancesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySpendableBalancesResponse".into()
    }
}
/// QuerySpendableBalanceByDenomRequest defines the gRPC request structure for
/// querying an account's spendable balance for a specific denom.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpendableBalanceByDenomRequest {
    /// address is the address to query balances for.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// denom is the coin denom to query balances for.
    #[prost(string, tag = "2")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySpendableBalanceByDenomRequest {
    const NAME: &'static str = "QuerySpendableBalanceByDenomRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest".into()
    }
}
/// QuerySpendableBalanceByDenomResponse defines the gRPC response structure for
/// querying an account's spendable balance for a specific denom.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpendableBalanceByDenomResponse {
    /// balance is the balance of the coin.
    #[prost(message, optional, tag = "1")]
    pub balance: ::core::option::Option<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for QuerySpendableBalanceByDenomResponse {
    const NAME: &'static str = "QuerySpendableBalanceByDenomResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse".into()
    }
}
/// QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalSupplyRequest {
    /// pagination defines an optional pagination for the request.
    ///
    /// Since: cosmos-sdk 0.43
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryTotalSupplyRequest {
    const NAME: &'static str = "QueryTotalSupplyRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryTotalSupplyRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryTotalSupplyRequest".into()
    }
}
/// QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
/// method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalSupplyResponse {
    /// supply is the supply of the coins
    #[prost(message, repeated, tag = "1")]
    pub supply: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// pagination defines the pagination in the response.
    ///
    /// Since: cosmos-sdk 0.43
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryTotalSupplyResponse {
    const NAME: &'static str = "QueryTotalSupplyResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryTotalSupplyResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryTotalSupplyResponse".into()
    }
}
/// QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySupplyOfRequest {
    /// denom is the coin denom to query balances for.
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySupplyOfRequest {
    const NAME: &'static str = "QuerySupplyOfRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySupplyOfRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySupplyOfRequest".into()
    }
}
/// QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySupplyOfResponse {
    /// amount is the supply of the coin.
    #[prost(message, optional, tag = "1")]
    pub amount: ::core::option::Option<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for QuerySupplyOfResponse {
    const NAME: &'static str = "QuerySupplyOfResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySupplyOfResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySupplyOfResponse".into()
    }
}
/// QueryParamsRequest defines the request type for querying x/bank parameters.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse defines the response type for querying x/bank parameters.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryParamsResponse".into()
    }
}
/// QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomsMetadataRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryDenomsMetadataRequest {
    const NAME: &'static str = "QueryDenomsMetadataRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryDenomsMetadataRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryDenomsMetadataRequest".into()
    }
}
/// QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomsMetadataResponse {
    /// metadata provides the client information for all the registered tokens.
    #[prost(message, repeated, tag = "1")]
    pub metadatas: ::prost::alloc::vec::Vec<Metadata>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryDenomsMetadataResponse {
    const NAME: &'static str = "QueryDenomsMetadataResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryDenomsMetadataResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryDenomsMetadataResponse".into()
    }
}
/// QueryDenomMetadataRequest is the request type for the Query/DenomMetadata RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomMetadataRequest {
    /// denom is the coin denom to query the metadata for.
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDenomMetadataRequest {
    const NAME: &'static str = "QueryDenomMetadataRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryDenomMetadataRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryDenomMetadataRequest".into()
    }
}
/// QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomMetadataResponse {
    /// metadata describes and provides all the client information for the requested token.
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
impl ::prost::Name for QueryDenomMetadataResponse {
    const NAME: &'static str = "QueryDenomMetadataResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryDenomMetadataResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryDenomMetadataResponse".into()
    }
}
/// QueryDenomOwnersRequest defines the request type for the DenomOwners RPC query,
/// which queries for a paginated set of all account holders of a particular
/// denomination.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomOwnersRequest {
    /// denom defines the coin denomination to query all account holders for.
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryDenomOwnersRequest {
    const NAME: &'static str = "QueryDenomOwnersRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryDenomOwnersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryDenomOwnersRequest".into()
    }
}
/// DenomOwner defines structure representing an account that owns or holds a
/// particular denominated token. It contains the account address and account
/// balance of the denominated token.
///
/// Since: cosmos-sdk 0.46
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DenomOwner {
    /// address defines the address that owns a particular denomination.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// balance is the balance of the denominated coin for an account.
    #[prost(message, optional, tag = "2")]
    pub balance: ::core::option::Option<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for DenomOwner {
    const NAME: &'static str = "DenomOwner";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.DenomOwner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.DenomOwner".into()
    }
}
/// QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.
///
/// Since: cosmos-sdk 0.46
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomOwnersResponse {
    #[prost(message, repeated, tag = "1")]
    pub denom_owners: ::prost::alloc::vec::Vec<DenomOwner>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryDenomOwnersResponse {
    const NAME: &'static str = "QueryDenomOwnersResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QueryDenomOwnersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QueryDenomOwnersResponse".into()
    }
}
/// QuerySendEnabledRequest defines the RPC request for looking up SendEnabled entries.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySendEnabledRequest {
    /// denoms is the specific denoms you want look up. Leave empty to get all entries.
    #[prost(string, repeated, tag = "1")]
    pub denoms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// pagination defines an optional pagination for the request. This field is
    /// only read if the denoms field is empty.
    #[prost(message, optional, tag = "99")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QuerySendEnabledRequest {
    const NAME: &'static str = "QuerySendEnabledRequest";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySendEnabledRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySendEnabledRequest".into()
    }
}
/// QuerySendEnabledResponse defines the RPC response of a SendEnable query.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySendEnabledResponse {
    #[prost(message, repeated, tag = "1")]
    pub send_enabled: ::prost::alloc::vec::Vec<SendEnabled>,
    /// pagination defines the pagination in the response. This field is only
    /// populated if the denoms field in the request is empty.
    #[prost(message, optional, tag = "99")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QuerySendEnabledResponse {
    const NAME: &'static str = "QuerySendEnabledResponse";
    const PACKAGE: &'static str = "cosmos.bank.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.bank.v1beta1.QuerySendEnabledResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.bank.v1beta1.QuerySendEnabledResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "rpc")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Balance queries the balance of a single coin for a single account.
        pub async fn balance(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryBalanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBalanceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/Balance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "Balance"));
            self.inner.unary(req, path, codec).await
        }
        /// AllBalances queries the balance of all coins for a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn all_balances(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllBalancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllBalancesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/AllBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "AllBalances"));
            self.inner.unary(req, path, codec).await
        }
        /// SpendableBalances queries the spendable balance of all coins for a single
        /// account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        ///
        /// Since: cosmos-sdk 0.46
        pub async fn spendable_balances(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySpendableBalancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySpendableBalancesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SpendableBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.bank.v1beta1.Query", "SpendableBalances"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SpendableBalanceByDenom queries the spendable balance of a single denom for
        /// a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        ///
        /// Since: cosmos-sdk 0.47
        pub async fn spendable_balance_by_denom(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySpendableBalanceByDenomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySpendableBalanceByDenomResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.bank.v1beta1.Query",
                        "SpendableBalanceByDenom",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// TotalSupply queries the total supply of all coins.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn total_supply(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTotalSupplyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalSupplyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/TotalSupply",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "TotalSupply"));
            self.inner.unary(req, path, codec).await
        }
        /// SupplyOf queries the supply of a single coin.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        pub async fn supply_of(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySupplyOfRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySupplyOfResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SupplyOf",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "SupplyOf"));
            self.inner.unary(req, path, codec).await
        }
        /// Params queries the parameters of x/bank module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomsMetadata queries the client metadata of a given coin denomination.
        pub async fn denom_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDenomMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomMetadataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomsMetadata queries the client metadata for all registered coin
        /// denominations.
        pub async fn denoms_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDenomsMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomsMetadataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomsMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomsMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// DenomOwners queries for all account addresses that own a particular token
        /// denomination.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        ///
        /// Since: cosmos-sdk 0.46
        pub async fn denom_owners(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDenomOwnersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomOwnersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/DenomOwners",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "DenomOwners"));
            self.inner.unary(req, path, codec).await
        }
        /// SendEnabled queries for SendEnabled entries.
        ///
        /// This query only returns denominations that have specific SendEnabled settings.
        /// Any denomination that does not have a specific setting will use the default
        /// params.default_send_enabled, and will not be returned by this query.
        ///
        /// Since: cosmos-sdk 0.47
        pub async fn send_enabled(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySendEnabledRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySendEnabledResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.bank.v1beta1.Query/SendEnabled",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.bank.v1beta1.Query", "SendEnabled"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "rpc")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Balance queries the balance of a single coin for a single account.
        async fn balance(
            &self,
            request: tonic::Request<super::QueryBalanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBalanceResponse>,
            tonic::Status,
        >;
        /// AllBalances queries the balance of all coins for a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn all_balances(
            &self,
            request: tonic::Request<super::QueryAllBalancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllBalancesResponse>,
            tonic::Status,
        >;
        /// SpendableBalances queries the spendable balance of all coins for a single
        /// account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        ///
        /// Since: cosmos-sdk 0.46
        async fn spendable_balances(
            &self,
            request: tonic::Request<super::QuerySpendableBalancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySpendableBalancesResponse>,
            tonic::Status,
        >;
        /// SpendableBalanceByDenom queries the spendable balance of a single denom for
        /// a single account.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        ///
        /// Since: cosmos-sdk 0.47
        async fn spendable_balance_by_denom(
            &self,
            request: tonic::Request<super::QuerySpendableBalanceByDenomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySpendableBalanceByDenomResponse>,
            tonic::Status,
        >;
        /// TotalSupply queries the total supply of all coins.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn total_supply(
            &self,
            request: tonic::Request<super::QueryTotalSupplyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalSupplyResponse>,
            tonic::Status,
        >;
        /// SupplyOf queries the supply of a single coin.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        async fn supply_of(
            &self,
            request: tonic::Request<super::QuerySupplyOfRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySupplyOfResponse>,
            tonic::Status,
        >;
        /// Params queries the parameters of x/bank module.
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
        /// DenomsMetadata queries the client metadata of a given coin denomination.
        async fn denom_metadata(
            &self,
            request: tonic::Request<super::QueryDenomMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomMetadataResponse>,
            tonic::Status,
        >;
        /// DenomsMetadata queries the client metadata for all registered coin
        /// denominations.
        async fn denoms_metadata(
            &self,
            request: tonic::Request<super::QueryDenomsMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomsMetadataResponse>,
            tonic::Status,
        >;
        /// DenomOwners queries for all account addresses that own a particular token
        /// denomination.
        ///
        /// When called from another module, this query might consume a high amount of
        /// gas if the pagination field is incorrectly set.
        ///
        /// Since: cosmos-sdk 0.46
        async fn denom_owners(
            &self,
            request: tonic::Request<super::QueryDenomOwnersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomOwnersResponse>,
            tonic::Status,
        >;
        /// SendEnabled queries for SendEnabled entries.
        ///
        /// This query only returns denominations that have specific SendEnabled settings.
        /// Any denomination that does not have a specific setting will use the default
        /// params.default_send_enabled, and will not be returned by this query.
        ///
        /// Since: cosmos-sdk 0.47
        async fn send_enabled(
            &self,
            request: tonic::Request<super::QuerySendEnabledRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySendEnabledResponse>,
            tonic::Status,
        >;
    }
    /// Query defines the gRPC querier service.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/cosmos.bank.v1beta1.Query/Balance" => {
                    #[allow(non_camel_case_types)]
                    struct BalanceSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryBalanceRequest>
                    for BalanceSvc<T> {
                        type Response = super::QueryBalanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryBalanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::balance(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BalanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/AllBalances" => {
                    #[allow(non_camel_case_types)]
                    struct AllBalancesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryAllBalancesRequest>
                    for AllBalancesSvc<T> {
                        type Response = super::QueryAllBalancesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryAllBalancesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::all_balances(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AllBalancesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SpendableBalances" => {
                    #[allow(non_camel_case_types)]
                    struct SpendableBalancesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySpendableBalancesRequest>
                    for SpendableBalancesSvc<T> {
                        type Response = super::QuerySpendableBalancesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuerySpendableBalancesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::spendable_balances(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SpendableBalancesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom" => {
                    #[allow(non_camel_case_types)]
                    struct SpendableBalanceByDenomSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QuerySpendableBalanceByDenomRequest,
                    > for SpendableBalanceByDenomSvc<T> {
                        type Response = super::QuerySpendableBalanceByDenomResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QuerySpendableBalanceByDenomRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::spendable_balance_by_denom(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SpendableBalanceByDenomSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/TotalSupply" => {
                    #[allow(non_camel_case_types)]
                    struct TotalSupplySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryTotalSupplyRequest>
                    for TotalSupplySvc<T> {
                        type Response = super::QueryTotalSupplyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTotalSupplyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::total_supply(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TotalSupplySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SupplyOf" => {
                    #[allow(non_camel_case_types)]
                    struct SupplyOfSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySupplyOfRequest>
                    for SupplyOfSvc<T> {
                        type Response = super::QuerySupplyOfResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuerySupplyOfRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::supply_of(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SupplyOfSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct DenomMetadataSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryDenomMetadataRequest>
                    for DenomMetadataSvc<T> {
                        type Response = super::QueryDenomMetadataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDenomMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denom_metadata(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomsMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct DenomsMetadataSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryDenomsMetadataRequest>
                    for DenomsMetadataSvc<T> {
                        type Response = super::QueryDenomsMetadataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDenomsMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denoms_metadata(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomsMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/DenomOwners" => {
                    #[allow(non_camel_case_types)]
                    struct DenomOwnersSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryDenomOwnersRequest>
                    for DenomOwnersSvc<T> {
                        type Response = super::QueryDenomOwnersResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDenomOwnersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::denom_owners(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomOwnersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/cosmos.bank.v1beta1.Query/SendEnabled" => {
                    #[allow(non_camel_case_types)]
                    struct SendEnabledSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySendEnabledRequest>
                    for SendEnabledSvc<T> {
                        type Response = super::QuerySendEnabledResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuerySendEnabledRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::send_enabled(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendEnabledSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "cosmos.bank.v1beta1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
