// This file is @generated by prost-build.
/// Distribution configuration data.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DistributionsParameters {
    /// The amount of staking token issued per block.
    #[prost(uint64, tag = "1")]
    pub staking_issuance_per_block: u64,
    /// The amount of staking token flowing from the community pool to the liquidity tournament each block.
    #[prost(uint64, tag = "2")]
    pub liquidity_tournament_incentive_per_block: u64,
}
impl ::prost::Name for DistributionsParameters {
    const NAME: &'static str = "DistributionsParameters";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.DistributionsParameters".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.DistributionsParameters".into()
    }
}
/// Genesis data for the distributions module.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GenesisContent {
    #[prost(message, optional, tag = "1")]
    pub distributions_params: ::core::option::Option<DistributionsParameters>,
}
impl ::prost::Name for GenesisContent {
    const NAME: &'static str = "GenesisContent";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.GenesisContent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.GenesisContent".into()
    }
}
/// Request for retrieving the pool size of the current epoch from the chain state.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurrentLqtPoolSizeRequest {}
impl ::prost::Name for CurrentLqtPoolSizeRequest {
    const NAME: &'static str = "CurrentLqtPoolSizeRequest";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.CurrentLqtPoolSizeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.CurrentLqtPoolSizeRequest".into()
    }
}
/// Response containing the pool size for the current epoch.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurrentLqtPoolSizeResponse {
    /// The current epoch index.
    #[prost(uint64, tag = "1")]
    pub epoch_index: u64,
    /// The total LQT pool size for the current epoch.
    #[prost(message, optional, tag = "2")]
    pub pool_size: ::core::option::Option<super::super::super::num::v1::Amount>,
}
impl ::prost::Name for CurrentLqtPoolSizeResponse {
    const NAME: &'static str = "CurrentLqtPoolSizeResponse";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.CurrentLqtPoolSizeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.CurrentLqtPoolSizeResponse".into()
    }
}
/// Request for retrieving the pool size at a specific epoch.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LqtPoolSizeByEpochRequest {
    /// The epoch for which we want to retrieve the pool size.
    #[prost(uint64, tag = "1")]
    pub epoch: u64,
}
impl ::prost::Name for LqtPoolSizeByEpochRequest {
    const NAME: &'static str = "LqtPoolSizeByEpochRequest";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.LqtPoolSizeByEpochRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.LqtPoolSizeByEpochRequest".into()
    }
}
/// Response containing the pool size at a specific epoch.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LqtPoolSizeByEpochResponse {
    /// The epoch for which the pool size is returned.
    #[prost(uint64, tag = "1")]
    pub epoch_index: u64,
    /// The total LQT pool size for the given epoch.
    #[prost(message, optional, tag = "2")]
    pub pool_size: ::core::option::Option<super::super::super::num::v1::Amount>,
}
impl ::prost::Name for LqtPoolSizeByEpochResponse {
    const NAME: &'static str = "LqtPoolSizeByEpochResponse";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.LqtPoolSizeByEpochResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.LqtPoolSizeByEpochResponse".into()
    }
}
/// Event emitted when the size of the LQT pool increases.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EventLqtPoolSizeIncrease {
    /// The epoch in which the pool size increase occurred.
    #[prost(uint64, tag = "1")]
    pub epoch: u64,
    /// The amount by which the LQT pool size increased in the block.
    #[prost(message, optional, tag = "2")]
    pub increase: ::core::option::Option<super::super::super::num::v1::Amount>,
    /// The new total size of the LQT pool after the increase in the block.
    #[prost(message, optional, tag = "3")]
    pub new_total: ::core::option::Option<super::super::super::num::v1::Amount>,
}
impl ::prost::Name for EventLqtPoolSizeIncrease {
    const NAME: &'static str = "EventLqtPoolSizeIncrease";
    const PACKAGE: &'static str = "penumbra.core.component.distributions.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.distributions.v1.EventLqtPoolSizeIncrease".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.distributions.v1.EventLqtPoolSizeIncrease".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "rpc")]
pub mod distributions_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query operations for the distributions component.
    #[derive(Debug, Clone)]
    pub struct DistributionsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DistributionsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DistributionsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DistributionsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DistributionsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn current_lqt_pool_size(
            &mut self,
            request: impl tonic::IntoRequest<super::CurrentLqtPoolSizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CurrentLqtPoolSizeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/penumbra.core.component.distributions.v1.DistributionsService/CurrentLqtPoolSize",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "penumbra.core.component.distributions.v1.DistributionsService",
                        "CurrentLqtPoolSize",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn lqt_pool_size_by_epoch(
            &mut self,
            request: impl tonic::IntoRequest<super::LqtPoolSizeByEpochRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LqtPoolSizeByEpochResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/penumbra.core.component.distributions.v1.DistributionsService/LqtPoolSizeByEpoch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "penumbra.core.component.distributions.v1.DistributionsService",
                        "LqtPoolSizeByEpoch",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "rpc")]
pub mod distributions_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DistributionsServiceServer.
    #[async_trait]
    pub trait DistributionsService: std::marker::Send + std::marker::Sync + 'static {
        async fn current_lqt_pool_size(
            &self,
            request: tonic::Request<super::CurrentLqtPoolSizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CurrentLqtPoolSizeResponse>,
            tonic::Status,
        >;
        async fn lqt_pool_size_by_epoch(
            &self,
            request: tonic::Request<super::LqtPoolSizeByEpochRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LqtPoolSizeByEpochResponse>,
            tonic::Status,
        >;
    }
    /// Query operations for the distributions component.
    #[derive(Debug)]
    pub struct DistributionsServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> DistributionsServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for DistributionsServiceServer<T>
    where
        T: DistributionsService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/penumbra.core.component.distributions.v1.DistributionsService/CurrentLqtPoolSize" => {
                    #[allow(non_camel_case_types)]
                    struct CurrentLqtPoolSizeSvc<T: DistributionsService>(pub Arc<T>);
                    impl<
                        T: DistributionsService,
                    > tonic::server::UnaryService<super::CurrentLqtPoolSizeRequest>
                    for CurrentLqtPoolSizeSvc<T> {
                        type Response = super::CurrentLqtPoolSizeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CurrentLqtPoolSizeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DistributionsService>::current_lqt_pool_size(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CurrentLqtPoolSizeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/penumbra.core.component.distributions.v1.DistributionsService/LqtPoolSizeByEpoch" => {
                    #[allow(non_camel_case_types)]
                    struct LqtPoolSizeByEpochSvc<T: DistributionsService>(pub Arc<T>);
                    impl<
                        T: DistributionsService,
                    > tonic::server::UnaryService<super::LqtPoolSizeByEpochRequest>
                    for LqtPoolSizeByEpochSvc<T> {
                        type Response = super::LqtPoolSizeByEpochResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LqtPoolSizeByEpochRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DistributionsService>::lqt_pool_size_by_epoch(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LqtPoolSizeByEpochSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for DistributionsServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "penumbra.core.component.distributions.v1.DistributionsService";
    impl<T> tonic::server::NamedService for DistributionsServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
