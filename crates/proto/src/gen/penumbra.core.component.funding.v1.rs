// This file is @generated by prost-build.
/// Funding component configuration data.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FundingParameters {
    /// The parameters governing the funding of the liquidity tournament.
    #[prost(message, optional, tag = "1")]
    pub liquidity_tournament: ::core::option::Option<
        funding_parameters::LiquidityTournament,
    >,
}
/// Nested message and enum types in `FundingParameters`.
pub mod funding_parameters {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LiquidityTournament {
        /// The fraction of gauge votes that an asset must pass to get any rewards.
        ///
        /// Takes a value in \[0, 100\].
        #[prost(uint64, tag = "1")]
        pub gauge_threshold_percent: u64,
        /// The maximum number of liquidity positions that can receive rewards.
        ///
        /// This avoids potential DoS vectors with processing a large number of small positions.
        #[prost(uint64, tag = "2")]
        pub max_positions: u64,
        /// The maximum number of delegators that can be rewarded.
        ///
        /// Also avoids potential DoS vectors
        #[prost(uint64, tag = "3")]
        pub max_delegators: u64,
        /// The share of rewards which will go to delegators, opposed with positions.
        ///
        /// Takes a value in \[0, 100\].
        #[prost(uint64, tag = "4")]
        pub delegator_share_percent: u64,
    }
    impl ::prost::Name for LiquidityTournament {
        const NAME: &'static str = "LiquidityTournament";
        const PACKAGE: &'static str = "penumbra.core.component.funding.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "penumbra.core.component.funding.v1.FundingParameters.LiquidityTournament"
                .into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/penumbra.core.component.funding.v1.FundingParameters.LiquidityTournament"
                .into()
        }
    }
}
impl ::prost::Name for FundingParameters {
    const NAME: &'static str = "FundingParameters";
    const PACKAGE: &'static str = "penumbra.core.component.funding.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.funding.v1.FundingParameters".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.funding.v1.FundingParameters".into()
    }
}
/// Genesis data for the funding component.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GenesisContent {
    #[prost(message, optional, tag = "1")]
    pub funding_params: ::core::option::Option<FundingParameters>,
}
impl ::prost::Name for GenesisContent {
    const NAME: &'static str = "GenesisContent";
    const PACKAGE: &'static str = "penumbra.core.component.funding.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.funding.v1.GenesisContent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.funding.v1.GenesisContent".into()
    }
}
/// Indicates that a funding stream reward was paid.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventFundingStreamReward {
    /// The recipient of the funding stream reward.
    /// This is a string value for future extensibility.
    /// Currently it will be either "community-pool"
    /// or an address.
    #[prost(string, tag = "1")]
    pub recipient: ::prost::alloc::string::String,
    /// The epoch for which the reward was paid.
    #[prost(uint64, tag = "2")]
    pub epoch_index: u64,
    /// The amount of the reward, in staking tokens.
    #[prost(message, optional, tag = "3")]
    pub reward_amount: ::core::option::Option<super::super::super::num::v1::Amount>,
}
impl ::prost::Name for EventFundingStreamReward {
    const NAME: &'static str = "EventFundingStreamReward";
    const PACKAGE: &'static str = "penumbra.core.component.funding.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "penumbra.core.component.funding.v1.EventFundingStreamReward".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/penumbra.core.component.funding.v1.EventFundingStreamReward".into()
    }
}
